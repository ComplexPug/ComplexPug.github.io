git branch -d <branch-name> 删除本地的git分支
git branch --set-upstream-to origin/newbranch 与远程分支关联
git branch -a 查看所有分支
git branch -r 列出所有远程分支
git branch 列出所有本地分支
git branch -m <旧名字> <新名字> 修改分支名
git branch [branch-name] 新建一个分支，但依然停留在当前分支

本地仓库的代码还未被更新，此时：
git fetch --all 更新远程仓库的代码为最新的
git reset --hard origin/master 让本地代码与origin / master完全相同

git checkout -b <branch> 新建一个分支，并切换到该分支
git checkout -- <filenames> 撤销文件修改，回滚到暂存区或者HEAD（优先暂存区）。
git checkout <branch-name>	切换到分支
git checkout main 切换回main分支
git checkout <commit-hashcode> /path/to/file git回滚文件到指定版
git checkout HEAD^ /path/to/file 回滚到上一个版本

git merge [branch] 合并指定分支到当前分支

删除远程分支
git push origin --delete [branch-name] 
git branch -dr [remote/branch]

git fetch	更新索引
git reset –hard 6e52	回退到某个ID
git add -u	将删除操作也添加到暂存区
git rm –cached filename	将暂存区的文件移出暂存区

根据commitid来回滚
git log /path/to/file

使用 git reset 回退项目版本
git reflog查看命令历史
git reset --hard <commit-hashcode>
    git reset --hard HEAD^


添加关联的远程git仓库
origin是远端的名字, 多个远端名字不能相同

git remote add origin https://github.com/iuxt/test.git 上传，并关联到master分支
git push -u origin master 合并代码
git checkout master
git merge dev            # 将dev代码合并到master
合并方式如果是fast-forward模式, 表示git只是切换了一下指针

删除分支, 分支改名

git push --delete origin oldbranch 删除远程分支
git push origin newbranch 将重命名后的分支推到远端

# 如果远程已经删除了分支, 本地还没更新, 可以使用
git fetch -p
rebase
利用rebase删除历史提交记录
git rebase -i <你要基于那个提交的id>
commit前面的pick改成d即可，表示丢弃这个commit，如果需要推送到远端的话，需要git push -f
注意：多人协作慎用git push -f

标签管理
git tag 查看标签 
git show v1.0 查看标签详情
创建标签
切换到对应的分支, 默认是打在最新的commit上的。
git tag v1
如果想要打到历史的commit id
# 查看历史的commit id
git log --pretty=oneline --abbrev-commit
# 对 commit id 打标签
git tag v0.9 f52c633
# 打标签带上说明
git tag -a v0.1 -m "version 0.1 released" 1094adb
推送标签
# 一次性全部推送标签
git push origin --tags
# 推送一个标签到远程
git push origin refs/tags/v0.1
删除标签
# 删除本地标签
git tag -d v0.1
# 删除远程标签，需要先删除本地标签
git tag -d v0.1
git push origin :refs/tags/v0.1


（相当于复制了remote的仓库到本地的xxx分支上
git diff 查看自己对代码做出的改变
git add 上传更新后的代码至暂存区
git commit 可以将暂存区里更新后的代码更新到本地git
git push origin xxx 将本地的xxxgit分支上传至github上的git
-----------------------------------------------------------
（如果在写自己的代码过程中发现远端GitHub上代码出现改变）
git pull origin master(main) 将远端修改过的代码再更新到本地
git rebase main 我在xxx分支上，先把main移过来，然后根据我的commit来修改成新的内容
（中途可能会出现，rebase conflict -----》手动选择保留哪段代码）
git push -f origin xxx 把rebase后并且更新过的代码再push到远端github上
（-f ---》强行）
原项目主人采用pull request 中的 squash and merge 合并所有不同的commit
----------------------------------------------------------------------------------------------
远端完成更新后
2.git pull origin master 再把远端的最新代码拉至本地